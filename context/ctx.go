package context

import config "gotemplate/cfg"

// 	"bytes"
// 	"errors"
// 	"fmt"

// 	"encoding/json"
// 	"net/http"

// 	"bitbucket.org/kudoindonesia/ovo_payments/internal/apicall"
// 	"bitbucket.org/kudoindonesia/ovo_payments/internal/cache"
// 	consts "bitbucket.org/kudoindonesia/ovo_payments/internal/const"
// 	"bitbucket.org/kudoindonesia/ovo_payments/internal/db"
// 	"github.com/syariatifaris/nukafka"

// 	perrors "github.com/pkg/errors"
// 	"github.com/syariatifaris/arkeus/core/net"

//AppContext the context for application
type AppContext struct {
	Config *config.Configuration
}

// //UIContext the context for UI compoenent
// type UIContext struct {
// 	Router            net.Router
// 	UCaseCtx          *UCaseContext
// 	MiddlewareContext *MiddlewareContext
// }

// //GetLang get default language
// func (u *UIContext) GetLang() string {
// 	return u.UCaseCtx.AppContext.Config.Common.Lang
// }

// //GetCfg gets the configuration
// func (u *UIContext) GetCfg() *config.Configuration {
// 	return u.UCaseCtx.AppContext.Config
// }

// //UCaseContext the context for Use Case
// type UCaseContext struct {
// 	*AppContext
// 	DepositDB  db.Deposit
// 	SpringAPI  apicall.Spring
// 	AgentCache cache.AgentCache
// 	Pubs       map[string]*nukafka.PubClient
// }

// //CreateData creates usecase data
// func (u *UCaseContext) CreateData(svcType string) *Data {
// 	return &Data{ServiceType: svcType}
// }

// //MiddlewareContext the context for middleware
// type MiddlewareContext struct {
// 	*AppContext
// }

// //Data wrapper for usecase, generated by handler
// type Data struct {
// 	ServiceType string
// 	Lang        string
// 	HTTPRequest *http.Request
// 	BytesValue  []byte
// }

// //Cast casts data based on servcice type
// //args:
// //	target: object target holder
// //returns:
// //	error operation
// func (d *Data) Cast(target interface{}) error {
// 	if d.ServiceType == "" {
// 		return errors.New("empty service type")
// 	}
// 	switch d.ServiceType {
// 	case consts.ServiceTypeHTTP:
// 		return d.httpCast(target)
// 	case consts.ServiceTypeMQ:
// 		return d.mqCast(target)
// 	}
// 	return nil
// }

// func (d *Data) httpCast(target interface{}) error {
// 	if d.HTTPRequest == nil {
// 		return errors.New("unable to cast http data, null request")
// 	}
// 	if c := d.HTTPRequest.Header.Get("Content-Type"); c != "application/json" {
// 		return fmt.Errorf("unsupported http content-type=%s", c)
// 	}
// 	if d.HTTPRequest.Body == nil {
// 		return nil
// 	}
// 	err := json.NewDecoder(d.HTTPRequest.Body).Decode(target)
// 	if err != nil {
// 		return perrors.Wrap(err, "unable decode request body")
// 	}
// 	return nil
// }

// func (d *Data) mqCast(target interface{}) error {
// 	return json.NewDecoder(bytes.NewReader(d.BytesValue)).Decode(target)
// }
